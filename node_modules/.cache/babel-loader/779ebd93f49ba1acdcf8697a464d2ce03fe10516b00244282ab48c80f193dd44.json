{"ast":null,"code":"var _jsxFileName = \"D:\\\\FE\\\\AI\\\\ai-chat-app\\\\src\\\\components\\\\SummarizeText.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './ComponentStyles.css'; // Để thêm CSS chung\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SummarizeText() {\n  _s();\n  const [text, setText] = useState('');\n  const [summary, setSummary] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const MIN_WORDS = 250;\n  const handleSummarize = async () => {\n    // Kiểm tra số từ\n    const wordCount = text.split(/\\s+/).filter(word => word !== '').length;\n    if (wordCount < MIN_WORDS) {\n      alert(`Vui lòng nhập ít nhất ${MIN_WORDS} từ để tóm tắt.`);\n      return;\n    }\n    setIsLoading(true);\n    setSummary(''); // Xóa tóm tắt cũ\n    // Ở đây bạn sẽ gọi API của AI để tóm tắt văn bản\n    // Ví dụ:\n    try {\n      // Giả lập cuộc gọi API\n      await new Promise(resolve => setTimeout(resolve, 1500));\n      const fakeSummary = `Đây là bản tóm tắt giả lập của đoạn văn bạn đã nhập. Đoạn văn gốc có ${wordCount} từ.`;\n      setSummary(fakeSummary);\n    } catch (error) {\n      console.error(\"Lỗi khi tóm tắt văn bản:\", error);\n      setSummary(\"Đã có lỗi xảy ra khi tóm tắt văn bản.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"component-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"T\\xF3m t\\u1EAFt \\u0111o\\u1EA1n v\\u0103n\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      className: \"text-input\",\n      placeholder: `Dán đoạn văn của bạn vào đây (ít nhất ${MIN_WORDS} từ)...`,\n      value: text,\n      onChange: e => setText(e.target.value),\n      rows: \"10\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"action-button\",\n      onClick: handleSummarize,\n      disabled: isLoading,\n      children: isLoading ? 'Đang tóm tắt...' : 'Tóm tắt'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), summary && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"result-box\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"K\\u1EBFt qu\\u1EA3 t\\xF3m t\\u1EAFt:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: summary\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n_s(SummarizeText, \"+2zLS4gGSYe4m7AB0BMkJGWzOLU=\");\n_c = SummarizeText;\nexport default SummarizeText;\nvar _c;\n$RefreshReg$(_c, \"SummarizeText\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","SummarizeText","_s","text","setText","summary","setSummary","isLoading","setIsLoading","MIN_WORDS","handleSummarize","wordCount","split","filter","word","length","alert","Promise","resolve","setTimeout","fakeSummary","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","value","onChange","e","target","rows","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/FE/AI/ai-chat-app/src/components/SummarizeText.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './ComponentStyles.css'; // Để thêm CSS chung\r\n\r\nfunction SummarizeText() {\r\n  const [text, setText] = useState('');\r\n  const [summary, setSummary] = useState('');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const MIN_WORDS = 250;\r\n\r\n  const handleSummarize = async () => {\r\n    // Kiểm tra số từ\r\n    const wordCount = text.split(/\\s+/).filter(word => word !== '').length;\r\n    if (wordCount < MIN_WORDS) {\r\n      alert(`Vui lòng nhập ít nhất ${MIN_WORDS} từ để tóm tắt.`);\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    setSummary(''); // Xóa tóm tắt cũ\r\n    // Ở đây bạn sẽ gọi API của AI để tóm tắt văn bản\r\n    // Ví dụ:\r\n    try {\r\n      // Giả lập cuộc gọi API\r\n      await new Promise(resolve => setTimeout(resolve, 1500));\r\n      const fakeSummary = `Đây là bản tóm tắt giả lập của đoạn văn bạn đã nhập. Đoạn văn gốc có ${wordCount} từ.`;\r\n      setSummary(fakeSummary);\r\n    } catch (error) {\r\n      console.error(\"Lỗi khi tóm tắt văn bản:\", error);\r\n      setSummary(\"Đã có lỗi xảy ra khi tóm tắt văn bản.\");\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"component-container\">\r\n      <h2>Tóm tắt đoạn văn</h2>\r\n      <textarea\r\n        className=\"text-input\"\r\n        placeholder={`Dán đoạn văn của bạn vào đây (ít nhất ${MIN_WORDS} từ)...`}\r\n        value={text}\r\n        onChange={(e) => setText(e.target.value)}\r\n        rows=\"10\"\r\n      ></textarea>\r\n      <button className=\"action-button\" onClick={handleSummarize} disabled={isLoading}>\r\n        {isLoading ? 'Đang tóm tắt...' : 'Tóm tắt'}\r\n      </button>\r\n      {summary && (\r\n        <div className=\"result-box\">\r\n          <h3>Kết quả tóm tắt:</h3>\r\n          <p>{summary}</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SummarizeText;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}